===========================
How to Effectively Use 0-add_integer.txt
===========================

Introduction
============
This guide provides instructions for utilizing the `add_integer(a, b=98)` function found in the `0-add_integer.py` module. The function's primary purpose is to perform integer addition and return the result. Explore this guide to understand how to make the most of this module.

Usage
=====
The ```add_integer()``` function is designed to add two integers together. It can also handle floating-point values, first converting them to integers before performing the addition. Below, you'll find examples demonstrating the usage of this function:

```python
>>> from 0-add_integer import add_integer

::

    # Example 1: Adding two integers
    >>> add_integer(2, 3)
    5

::

    # Example 2: Adding an integer and a negative integer
    >>> add_integer(2, -3)
    -1

::

    # Example 3: Adding floating-point numbers (converted to integers)
    >>> add_integer(2.0, 3.0)
    5

::
    # Example 4: Adding floating-point numbers (converted to integers)
    >>> add_integer(2.9, 0.2)
    2

::
    # Example 5: Combining floating-point and integer values
    >>> add_integer(2.3, -3)
    -1

::
    # Example 6: Using the default second argument (b=98)
    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
TypeError is raised if either argument is a non-integer and non-float:

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

TypeError message is only printed for the first argument,
if both arguments are non-integers and non-floats

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
